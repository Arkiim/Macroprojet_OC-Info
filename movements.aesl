<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="34294" name="thymio-II">var a = 1000 # valeur pour timer où thymio va tout droit
var b = 2300 # valeur pour timer où thymio tourne
var mf = 150 # vitesse lorsque le thymio avance (Moove Forward)
var mt = 200 # vitesse lorsque le thymio tourne (Moove Turn)
var turn = 0 # variable "flag" pour pouvoir avancer après un virage
var c[] = [2,2,0	]
var moove = 0
var tin  # var définissant quand le test des inputs s'arrête(Test INputs)
var i = 0 # var définissant un élément du tableau C
#*
if  c[0] != 0 then
 moove = 1 # Si col1 (col de avancer) contient qqchose va avancer ( doit attendre de appuyer sur go donc just flag	
end
if  moove == 1 then # fonction go
	avance elseif droite elseif gauche 
end 
_____
Partie test *#
#Input de télécommande flèche haut c[i] = 1, flèche droite c[i]=2, flèche gauche c[i]=3
tin=1
while tin == 1 do 
	if c[i]== 1 
	then  # si cell du tableau d'inputs est 1,2 ou 3 avance ou tourne
		callsub moove 
	elseif 	c[i]== 2 
	then
		callsub tright
	elseif c[i]== 3 
	then
		callsub tleft
	i++
	end
end 

 # problème le thymio ne s'arrête pas et ne passe pas à la prochaine condition, pourquoi ? Quand il tourne, il ne fait que tourner il n'avance pas comme prévu => (hypothèse) timer ne s'arrête pas ? Pourquoi ?

#*_____
Partie mouvement*#

sub moove # fait avancer le thymio d'une case
	timer.period[0]= a
	motor.left.target = mf
	motor.right.target = mf
		
onevent button.forward
callsub moove


sub tright # fait tourner le thymio a droite puis "active" turn
	timer.period[0] = b
	motor.left.target = mt
	motor.right.target = 0
	turn = 1	

onevent button.right
callsub tright


sub tleft # fait tourner le thymio a gauche

	timer.period[0] = b
	motor.left.target = 0
	motor.right.target = mt
	turn = 1
	
onevent button.left
callsub tleft


onevent timer0
	if turn == 1  # si le flag pour tourner (turn) est nul , il arrête le mouvement 			sinon active le 2nd timer, pour avancer d'une case 
	then
		timer.period[1]= a
		motor.left.target = mf
		motor.right.target = mf
		turn = 0
	elseif turn ==0 # S'il a tourné, avance d'une case
	then
		timer.period[0] = 0
		motor.left.target = 0
		motor.right.target = 0	 		
	end
	
onevent timer1 #arrête timer1
	timer.period[1] = 0
	motor.left.target = 0
	motor.right.target = 0
	turn = 0</node>


</network>
